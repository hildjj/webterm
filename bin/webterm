#!/usr/bin/env node
'use strict'

const path = require('path')
const url = require('url')
const { spawn } = require('child_process')
const Koa = require('koa')
const route = require('koa-route')
const websockify = require('koa-websocket')
const opn = require('opn')

const app = websockify(new Koa())
const socks = []
let buf = []
const [cmd, ...argv] = process.argv.slice(2)

function enq (chunk) {
  chunk = JSON.stringify(chunk)
  if (socks.length === 0) {
    buf.push(chunk)
  } else {
    for (const s of socks) {
      s.send(chunk)
    }
  }
}

if (!cmd) {
  process.stdin.setEncoding('utf8')
  process.stdin.on('data', d => enq({stdout: d}))
} else {
  enq({cmd})
  const child = spawn(cmd, argv)
  child.stdout.setEncoding('utf8')
  child.stderr.setEncoding('utf8')
  child.stdout.on('data', d => enq({stdout: d}))
  child.stderr.on('data', d => enq({stderr: d}))
}

app.ws.use(route.all('/sock/', (ctx) => {
  const ws = ctx.websocket
  socks.push(ws)
  for (const b of buf) {
    ws.send(b)
  }
  buf = []
  ws.on('message', (message) => {
    process.stdout.write(message)
  })
  ctx.websocket.on('close', (code, reason) => {
    const i = socks.indexOf(ws)
    socks.splice(i, 1)
  })
}))

app.use(require('koa-static')(path.join(__dirname, '..', 'web')))

const server = app.listen({
  port: 0,
  host: 'localhost'
}, () => {
  const {port, address} = server.address()
  opn(url.format({
    protocol: 'http',
    hostname: address,
    port,
    pathname: '/'
  }))
})
